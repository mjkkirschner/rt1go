// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rtgo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RtgoClient is the client API for Rtgo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RtgoClient interface {
	Render(ctx context.Context, in *RenderRequest, opts ...grpc.CallOption) (*RenderReply, error)
}

type rtgoClient struct {
	cc grpc.ClientConnInterface
}

func NewRtgoClient(cc grpc.ClientConnInterface) RtgoClient {
	return &rtgoClient{cc}
}

func (c *rtgoClient) Render(ctx context.Context, in *RenderRequest, opts ...grpc.CallOption) (*RenderReply, error) {
	out := new(RenderReply)
	err := c.cc.Invoke(ctx, "/rtgo.rtgo/Render", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RtgoServer is the server API for Rtgo service.
// All implementations must embed UnimplementedRtgoServer
// for forward compatibility
type RtgoServer interface {
	Render(context.Context, *RenderRequest) (*RenderReply, error)
	mustEmbedUnimplementedRtgoServer()
}

// UnimplementedRtgoServer must be embedded to have forward compatible implementations.
type UnimplementedRtgoServer struct {
}

func (UnimplementedRtgoServer) Render(context.Context, *RenderRequest) (*RenderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Render not implemented")
}
func (UnimplementedRtgoServer) mustEmbedUnimplementedRtgoServer() {}

// UnsafeRtgoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RtgoServer will
// result in compilation errors.
type UnsafeRtgoServer interface {
	mustEmbedUnimplementedRtgoServer()
}

func RegisterRtgoServer(s grpc.ServiceRegistrar, srv RtgoServer) {
	s.RegisterService(&Rtgo_ServiceDesc, srv)
}

func _Rtgo_Render_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RtgoServer).Render(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rtgo.rtgo/Render",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RtgoServer).Render(ctx, req.(*RenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rtgo_ServiceDesc is the grpc.ServiceDesc for Rtgo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rtgo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rtgo.rtgo",
	HandlerType: (*RtgoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Render",
			Handler:    _Rtgo_Render_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/rtgo.proto",
}
